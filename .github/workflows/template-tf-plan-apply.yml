name: 'Terraform Plan/Apply Workflow'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      tf_state_key:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDD authenticate.
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  SLEEP_TIME: 30

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: "Authenticate to Azure"
      id: "azure-login"
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get GitHub-hosted runner public IP
      id: get_ip
      run: |
        echo "Public IP: $(curl -s ifconfig.me)"
        echo "runner_ip=$(curl -s ifconfig.me)" >> $GITHUB_ENV

    - name: Whitelist GitHub-hosted runner IP on storage account firewall
      run: |
        az storage account network-rule add \
          --resource-group ${{ vars.RESOURCE_GROUP_NAME }} \
          --account-name ${{ vars.STORAGE_ACCOUNT_NAME }} \
          --ip-address ${{ env.runner_ip }}

    - name: Wait for IP whitelisting to propagate
      run: sleep ${{ env.SLEEP_TIME }}

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        max_attempts=5
        delay=10
        for attempt in $(seq 1 $max_attempts); do
          if terraform init -backend-config="storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }}" \
                            -backend-config="resource_group_name=${{ vars.RESOURCE_GROUP_NAME }}" \
                            -backend-config="container_name=${{ vars.CONTAINER_NAME }}" \
                            -backend-config="key=${{ inputs.tf_state_key }}"; then
            echo "Terraform init succeeded"
            break
          else
            echo "Attempt $attempt: Terraform init failed, retrying..."
            sleep $((delay * 2 ** (attempt - 1)))
          fi
        done

    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan -var "env_name=${{ inputs.environment }}" || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else
          exit 0
        fi

    # Save plan to artifacts
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: tfplan

    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)

        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT

    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      continue-on-error: true
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

    # If this is a PR post the changes
    - name: Push Terraform Output to PR
      continue-on-error: true
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })

    - name: Remove GitHub-hosted runner IP from storage account firewall
      if: always()  # Ensures this runs even if previous steps fail
      run: |
        az storage account network-rule remove \
          --resource-group ${{ vars.RESOURCE_GROUP_NAME }} \
          --account-name ${{ vars.STORAGE_ACCOUNT_NAME }} \
          --ip-address ${{ env.runner_ip }}

  terraform-apply:
    name: 'Terraform Apply'
    if: needs.terraform-plan.outputs.tfplanExitCode == 2 && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [terraform-plan]

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Auth to Azure to whtielist GH runner IP on state storage account
    - name: "Authenticate to Azure"
      id: "azure-login"
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get GitHub-hosted runner public IP
      id: get_ip
      run: |
        echo "Public IP: $(curl -s ifconfig.me)"
        echo "runner_ip=$(curl -s ifconfig.me)" >> $GITHUB_ENV

    - name: Whitelist GitHub-hosted runner IP on storage account firewall
      run: |
        az storage account network-rule add \
          --resource-group ${{ vars.RESOURCE_GROUP_NAME }} \
          --account-name ${{ vars.STORAGE_ACCOUNT_NAME }} \
          --ip-address ${{ env.runner_ip }}

    - name: Wait for IP whitelisting to propagate
      run: sleep ${{ env.SLEEP_TIME }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        max_attempts=5
        delay=10
        for attempt in $(seq 1 $max_attempts); do
          if terraform init -backend-config="storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }}" \
                            -backend-config="resource_group_name=${{ vars.RESOURCE_GROUP_NAME }}" \
                            -backend-config="container_name=${{ vars.CONTAINER_NAME }}" \
                            -backend-config="key=${{ inputs.tf_state_key }}"; then
            echo "Terraform init succeeded"
            break
          else
            echo "Attempt $attempt: Terraform init failed, retrying..."
            sleep $((delay * 2 ** (attempt - 1)))
          fi
        done

    # Download saved plan from artifacts
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

    - name: Remove GitHub-hosted runner IP from storage account firewall
      if: always()  # Ensures this runs even if previous steps fail
      run: |
        az storage account network-rule remove \
          --resource-group ${{ vars.RESOURCE_GROUP_NAME }} \
          --account-name ${{ vars.STORAGE_ACCOUNT_NAME }} \
          --ip-address ${{ env.runner_ip }}
